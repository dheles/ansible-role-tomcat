---

- name: get java version
  shell:   "java -version 2>&1"
  register: java_version_result
  changed_when: false

- name: test java version
  fail:
    msg: "this installation of tomcat requires java version {{ java_version }} or higher"
  when:  "'{{ java_version }}' not in java_version_result.stdout"

- name: get tomcat version
  shell:   "{{ catalina_home }}/bin/version.sh"
  register: tomcat_version_result
  failed_when: false
  changed_when: false

- name: check if tomcat service is running
  command: systemctl is-active tomcat
  failed_when: false
  changed_when: false
  register: tomcat_status

- name: debug version check
  debug: var="{{ tomcat_version_result.stdout }}"
  when: "'{{ tomcat_version }}' not in tomcat_version_result.stdout"

- name: debug status check
  debug: var="{{ tomcat_status }}"
  when: tomcat_status.stdout != 'active'

- name: debug reinstall check
  debug: var="{{ tomcat_reinstall }}"
  when: tomcat_reinstall

- name: debug conditional check
  debug: var="{{ tomcat_version }}"
  when: ('{{ tomcat_version }}' not in tomcat_version_result.stdout) or
        (tomcat_status.stdout != 'active') or
        tomcat_reinstall

  # only install if warranted (wrong version, service not running, or force reinstall flag set)
- block:
  - name: add tomcat user
    user:
      name: "{{ tomcat_user }}"
    become: true

  - name: get tomcat checksum
    set_fact:
      tomcat_checksum: "{{ tomcat_checksum_algo }}:{{ item | replace(' *' + tomcat_download_file,'') }}"
    with_url: "{{ tomcat_checksum_url }}"

  - name: debug the checksum
    debug: var=tomcat_checksum

  - name: get tomcat
    get_url:
      url:      "{{ tomcat_url }}"
      dest:     "{{ tomcat_download_dir }}"
      checksum: "{{ tomcat_checksum }}"
    register: got_tomcat

  - name: debug
    debug: var="'{{ tomcat_install_dir }}'"

  - name: debug 2
    debug: var="'{{ tomcat_download_dir }}/{{ tomcat_download_file }}'"

  - name: extract tomcat
    unarchive:
      src:        "{{ tomcat_download_dir }}/{{ tomcat_download_file }}"
      dest:       "{{ tomcat_install_dir }}"
      remote_src: yes
      owner:      "{{ tomcat_user }}"
    when: got_tomcat.changed

  - name: symlink tomcat
    file:
      src:    "{{ tomcat_install_dir }}/{{ tomcat_dir }}"
      dest:   "{{ catalina_home }}"
      owner:  "{{ tomcat_user }}"
      state:  link

  - name: set tomcat environment vars
    lineinfile:
      dest:   "/etc/profile.d/tomcat.sh"
      line:   "export CATALINA_HOME={{ catalina_home }}"
      state:  present
      create: yes

  - name: grant admin access to tomcat manager app
    blockinfile:
      dest: "{{ catalina_home }}/conf/tomcat-users.xml"
      marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
      insertbefore: "</tomcat-users>"
      content: |
          <role rolename="manager-gui" />
          <user username="{{ tomcat_admin }}" password="{{ tomcat_admin_password }}" roles="manager-gui" />
    when: tomcat_manager_access

  - name: configure tomcat service
    template:
      src:  "tomcat.service.j2"
      dest: "/etc/systemd/system/tomcat.service"

  - name: start tomcat service
    systemd:
      name: "tomcat"
      daemon_reload: yes
      enabled: yes
      state: started


  when: ('{{ tomcat_version }}' not in tomcat_version_result.stdout) or
        tomcat_status.stdout != 'active' or
        tomcat_reinstall
  # end block
